!!****if* source/physics/Gravity/GravityMain/Poisson/Multipole_experimental/Gravity_init
!!
!! NAME
!!
!!  Gravity_init
!!
!! 
!! SYNOPSIS
!!
!!  Gravity_init()
!!
!!
!! DESCRIPTION
!!
!!  Initialize the multipole Poisson solver.  Read in any of the
!!  runtime parameters for this solver.  All solver common data
!!  is stored in the mpole_common module
!!
!!  ARGUMENTS
!!
!!
!!***

subroutine Gravity_init()

  use Gravity_data
  use Simulation_data, ONLY: sim_objMass, obj_radius, obj_ipos, sim_tRelax, sim_periBeta, &
      sim_startBeta, sim_periodFac, sim_orbEcc, sim_xMax, sim_xMin, sim_msun, sim_tInitial
  use Grid_interface, ONLY: Grid_getListOfBlocks
  use RuntimeParameters_interface, ONLY : RuntimeParameters_get, &
    RuntimeParameters_mapStrToInt
  use PhysicalConstants_interface, ONLY : PhysicalConstants_get
  use Logfile_interface, ONLY: Logfile_stampMessage
  use Gravity_interface, ONLY: Gravity_potentialListOfBlocks
  use gr_mpoleData, ONLY: Mtot, X_centerofmass, Y_centerofmass, Z_centerofmass 
  use Driver_data, ONLY: dr_restart, dr_simTime
  use IO_interface, ONLY: IO_getScalar
  use tree, ONLY: lrefine_max
  use Driver_interface, ONLY : Driver_abortFlash, Driver_getMype,&
    Driver_getComm, Driver_getNumProcs
  use gr_mpoleInterface, ONLY : gr_mpoleCopyMoments

  implicit none
  double precision :: newton, newx, newy, newz, period, a, ecc_anom, start_dist
  integer :: i
  integer :: blockCount
  integer :: blockList(MAXBLOCKS)

#include "constants.h"
#include "Flash.h"

  character(len=MAX_STRING_LENGTH) :: strGeometry
  character(len=200) :: logstr

  ! Everybody should know these
  call Driver_getMype(MESH_COMM,grv_meshMe)
  call Driver_getComm(MESH_COMM,grv_meshComm)
  call Driver_getNumProcs(MESH_COMM,grv_meshNumProcs)

  call PhysicalConstants_get("Newton", newton)
  
  if (dr_restart) then
  ! NEED TO ADD OBJECT VECTORS HERE
      call IO_getScalar("Mtot", Mtot)
      call IO_getScalar("X_centerofmass", X_centerofmass)
      call IO_getScalar("Y_centerofmass", Y_centerofmass)
      call IO_getScalar("Z_centerofmass", Z_centerofmass)
      call IO_getScalar("ptxpos", grv_ptvec(1))
      call IO_getScalar("ptypos", grv_ptvec(2))
      call IO_getScalar("ptzpos", grv_ptvec(3))
      call IO_getScalar("ptxvel", grv_ptvec(4))
      call IO_getScalar("ptyvel", grv_ptvec(5))
      call IO_getScalar("ptzvel", grv_ptvec(6))
      call IO_getScalar("obxpos", grv_obvec(1))
      call IO_getScalar("obypos", grv_obvec(2))
      call IO_getScalar("obzpos", grv_obvec(3))
      call IO_getScalar("obxvel", grv_obvec(4))
      call IO_getScalar("obyvel", grv_obvec(5))
      call IO_getScalar("obzvel", grv_obvec(6))
      call IO_getScalar("grv_oexactvec_x",  grv_oexactvec(1))
      call IO_getScalar("grv_oexactvec_y",  grv_oexactvec(2))
      call IO_getScalar("grv_oexactvec_z",  grv_oexactvec(3))
      call IO_getScalar("grv_oexactvec_vx", grv_oexactvec(4))
      call IO_getScalar("grv_oexactvec_vy", grv_oexactvec(5))
      call IO_getScalar("grv_oexactvec_vz", grv_oexactvec(6))
      call IO_getScalar("grv_ompolevec_x",  grv_ompolevec(1))
      call IO_getScalar("grv_ompolevec_y",  grv_ompolevec(2))
      call IO_getScalar("grv_ompolevec_z",  grv_ompolevec(3))
      call IO_getScalar("grv_ompolevec_vx", grv_ompolevec(4))
      call IO_getScalar("grv_ompolevec_vy", grv_ompolevec(5))
      call IO_getScalar("grv_ompolevec_vz", grv_ompolevec(6))
      call IO_getScalar("optxpos", grv_optvec(1))
      call IO_getScalar("optypos", grv_optvec(2))
      call IO_getScalar("optzpos", grv_optvec(3))
      call IO_getScalar("optxvel", grv_optvec(4))
      call IO_getScalar("optyvel", grv_optvec(5))
      call IO_getScalar("optzvel", grv_optvec(6))
      call IO_getScalar("oobxpos", grv_oobvec(1))
      call IO_getScalar("oobypos", grv_oobvec(2))
      call IO_getScalar("oobzpos", grv_oobvec(3))
      call IO_getScalar("oobxvel", grv_oobvec(4))
      call IO_getScalar("oobyvel", grv_oobvec(5))
      call IO_getScalar("oobzvel", grv_oobvec(6))
      call IO_getScalar("bndxpos", grv_boundvec(1))
      call IO_getScalar("bndypos", grv_boundvec(2))
      call IO_getScalar("bndzpos", grv_boundvec(3))
      call IO_getScalar("bndxvel", grv_boundvec(4))
      call IO_getScalar("bndyvel", grv_boundvec(5))
      call IO_getScalar("bndzvel", grv_boundvec(6))
      call IO_getScalar("dynrefinemax", grv_dynRefineMax)
      call IO_getScalar("ptmass", grv_ptmass)
      call IO_getScalar("optmass", grv_optmass)
      call IO_getScalar("ototmass", grv_ototmass)
      call IO_getScalar("momacc_x", grv_momacc(1))
      call IO_getScalar("momacc_y", grv_momacc(2))
      call IO_getScalar("momacc_z", grv_momacc(3))
      call IO_getScalar("angmomacc_x", grv_angmomacc(1))
      call IO_getScalar("angmomacc_y", grv_angmomacc(2))
      call IO_getScalar("angmomacc_z", grv_angmomacc(3))
      call IO_getScalar("eneracc", grv_eneracc)
      call IO_getScalar("massacc", grv_massacc)
  else
      call RuntimeParameters_get("ptmass", grv_ptmass)
      grv_optmass = grv_ptmass
      grv_momacc = 0.d0
      grv_angmomacc = 0.d0
      grv_eneracc = 0.d0
      grv_massacc = 0.d0
  endif

  call RuntimeParameters_get("geometry", strGeometry)
  call RuntimeParameters_mapStrToInt(strGeometry, grav_geometry)
  call RuntimeParameters_get("grav_boundary_type", grav_boundary_type)
  call RuntimeParameters_get("grv_comCutoff",grv_comCutoff)
  call RuntimeParameters_get("grv_comPeakCut",grv_comPeakCut)
  call RuntimeParameters_get("grv_finiteDiffLen", grv_finiteDiffLen)
  call RuntimeParameters_get("grv_orbTol", grv_orbTol)
  call RuntimeParameters_get("grv_orbMinForce", grv_orbMinForce)
  call RuntimeParameters_get("grv_orb3D", grv_orb3D)

  call RuntimeParameters_get("useGravity", useGravity)
  call RuntimeParameters_get("updateGravity", updateGravity)

  grav_poisfact = 4.d0 * PI * newton
  grv_factor = -newton * grv_ptmass
  grv_thresh = 1.d-10

  call Grid_getListOfBlocks(LEAF,blockList,blockCount)
  call Gravity_potentialListOfBlocks(blockCount,blockList)
  call gr_mpoleCopyMoments()
  call Bound_mass(blockCount, blockList)
  grv_totmass0 = grv_totmass ! Used in Orbit_update
  if (sim_periBeta .eq. 0.d0) then
      call RuntimeParameters_get("sim_periDist", grv_periDist)
  else
      grv_periDist = obj_radius(obj_ipos)/sim_periBeta*(grv_ptmass/grv_totmass)**(1.d0/3.d0)
  endif
  if (sim_periodFac .gt. 0.d0) then
      a = grv_periDist/(1.d0 - sim_orbEcc)
      period = dsqrt(4.d0*PI**2.d0/newton/(grv_ptmass + grv_totmass)*a**3.d0)
      grv_periTime = sim_periodFac*period + sim_tRelax
  endif
  if (sim_startBeta .gt. 0.d0) then
      a = grv_periDist/(1.d0 - sim_orbEcc)
      period = dsqrt(4.d0*PI**2.d0/newton/(grv_ptmass + grv_totmass)*a**3.d0)
      start_dist = obj_radius(obj_ipos)/sim_startBeta*(grv_ptmass/grv_totmass)**(1.d0/3.d0)
      if (start_dist .gt. 2.d0*a - grv_periDist) call Driver_abortFlash('start_dist too large!')
      ecc_anom = dacos((a - start_dist)/a/sim_orbEcc)
      grv_periTime = abs(ecc_anom - sim_orbEcc*dsin(ecc_anom))*period/2.d0/PI + sim_tRelax
  endif
  if (.not. dr_restart) then
      call calc_orbit(sim_tRelax, grv_totmass, grv_ptmass, grv_obvec, grv_ptvec)
      grv_optvec = grv_ptvec
      grv_oobvec = grv_obvec
      grv_hptvec = grv_ptvec
      grv_hobvec = grv_obvec
      grv_dynRefineMax = lrefine_max
  endif
  if (grv_meshMe .eq. MASTER_PE) then
      write(logstr, fmt='(A30, 2ES15.8)') 'Bound mass, start distance:', grv_bound, start_dist
      call Logfile_stampMessage(logstr)
      write(logstr, fmt='(A30, 6ES15.8)') 'COM start pos:', grv_obvec
      call Logfile_stampMessage(logstr)
      write(logstr, fmt='(A30, 6ES15.8)') 'Pt. mass start pos:', grv_ptvec
      call Logfile_stampMessage(logstr)
      write(logstr, fmt='(A30, 2ES15.8)') 'Semimajor axis, eccentricity:', a, sim_orbEcc
      call Logfile_stampMessage(logstr)
      write(logstr, fmt='(A30, 2ES15.8)') 'Period, pericenter time:', period, grv_periTime
      call Logfile_stampMessage(logstr)
      write(logstr, fmt='(A30, 2ES15.8)') 'Obj. radius, pericenter dist:', obj_radius(obj_ipos), grv_periDist
      call Logfile_stampMessage(logstr)
      !do i = 1, 30
      !    call calc_orbit(1000.d0*i, newx, newy, newz, period)
      !    write(logstr, fmt='(2ES11.4)'), newx, newy
      !    call Logfile_stampMessage(logstr)
      !enddo
  endif

  if (dr_simTime .eq. sim_tInitial) then
      open(unit = 11, file = 'extras.dat', status = 'unknown')
      write(11, fmt='(ES21.15)') sim_periBeta
      write(11, fmt='(ES21.15)') period
      write(11, fmt='(ES21.15)') grv_periTime
      write(11, fmt='(ES21.15)') obj_radius(obj_ipos)
      write(11, fmt='(ES21.15)') grv_bound/sim_msun
      write(11, fmt='(ES21.15)') sim_orbEcc
      write(11, fmt='(ES21.15)') grv_ptmass
      write(logstr, fmt='(I4)')  lrefine_max
      write(11, fmt='(A)') adjustl(logstr)
      write(11, fmt='(ES21.15)') sim_xMax - sim_xMin
      close(11) 
  endif

  return
end subroutine Gravity_init
