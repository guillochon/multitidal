!!****if* source/Grid/GridSolvers/Multipole/gr_isoFindMassCenter
!!
!! NAME
!!
!!  gr_isoFindMassCenter
!!
!! SYNOPSIS
!!
!!  gr_isoFindMassCenter(integer, intent(in) :: idensvar)
!!
!! DESCRIPTION
!!
!!  Computes the centroid of the specified variable and returns
!!  its location in the mpole_common variables Xcm, Ycm, and Zcm.
!!  Also computes the total value of the quantity and leaves it
!!  in the variable Mtot.  If Mtot=0, the routine aborts.
!!
!! ARGUMENTS
!!
!!  idensvar -- the index of the density variable
!!
!!***
#ifdef DEBUG_ALL
#define DEBUG_GRAVITY
#endif


subroutine gr_isoFindMassCenter (idensvar)

    use Grid_data, ONLY : gr_myPE
    use Driver_interface, ONLY : Driver_abortFlash
    use Logfile_interface, ONLY : Logfile_stamp
    use Grid_interface, ONLY : Grid_getListOfBlocks, Grid_getMinCellSize
    use gr_isoMpoleData, ONLY : G_2DSPHERICAL, Xcm, Ycm, Zcm, &
        mpole_geometry, Mtot
    use Driver_data, ONLY : dr_simTime, dr_dt, dr_restart
    use RuntimeParameters_interface, ONLY : RuntimeParameters_get
    use Gravity_data, ONLY : grv_exactvec, grv_totmass, grv_comCutoff, grv_densCut


    implicit none
    
#include "constants.h"
#include "Flash.h"

    include "Flash_mpi.h"
    
    integer, intent(IN)  :: idensvar
    
    integer, parameter :: nsum = 14    ! Number of summed quantities;
    ! coordinate w/mpole_sum_local
    real    :: sum(nsum), lsum(nsum), tinitial, velscl, min_cell_size
    real    :: extrema, ldenscut
    
    integer :: blockCount, blockList(MAXBLOCKS)
    integer :: error, lb
    character(len=124) :: str_buffer
    
    !==========================================================================
    

    ! Sum quantities over all locally held leaf blocks.


    if(mpole_geometry /= G_2DSPHERICAL) then
       

       sum  = 0.
       lsum = 0.

       call Grid_getListOfBlocks(LEAF, blockList, blockCount)     

       ldenscut = -huge(0.d0)
       do lb = 1, blockCount
          call Grid_findExtrema (blockList(lb), idensvar, 1, extrema)
          if (extrema .gt. ldenscut) ldenscut = extrema
       enddo

       call MPI_AllReduce (ldenscut, grv_densCut, 1, FLASH_REAL, & 
            MPI_Max, MPI_Comm_World, error)

       do lb = 1, blockCount
          call gr_isoSumLocal (blockList(lb), nsum, idensvar, lsum )
       enddo
       
         !Give all processors a copy of the global sums.
       call MPI_AllReduce (lsum, sum, nsum, FLASH_REAL, & 
            MPI_Sum, MPI_Comm_World, error)
       
    
       !Now normalize the center-of-mass coordinates.
       
       Mtot = sum(1)
       
       if (abs(Mtot) < TINY(Mtot)) &
            call Driver_abortFlash("FATAL ERROR: mpole_centerOfMass:  Mtot = 0")
       
       if (Mtot < 0.) then
          write (str_buffer,*) 'mpole_centerOfMass:  Mtot = ', Mtot
          call Logfile_stamp(gr_myPE, str_buffer, 'warning')
       endif
       
       Xcm = sum(2) / Mtot
       Ycm = sum(3) / Mtot
       Zcm = sum(4) / Mtot

       call RuntimeParameters_get('tinitial',tinitial)
       
       grv_totmass = sum(8)
       grv_exactvec(1) = sum(9)/sum(8)
       grv_exactvec(2) = sum(10)/sum(8)
       grv_exactvec(3) = sum(11)/sum(8)
       grv_exactvec(4) = sum(12)/sum(8)
       grv_exactvec(5) = sum(13)/sum(8)
       grv_exactvec(6) = sum(14)/sum(8)
    end if
#ifdef DEBUG_GRAVITY
    print*,'center of mass found'
#endif
    return
end subroutine gr_isoFindMassCenter
